---
jupyter: python3
format: gfm
---

<!-- README.md is generated from README.Rmd. Please edit that file -->

```{python setup}
#| echo: FALSE
import shinylive
import os

def get_absolute_file_paths(directory, ignore=[".pyc"]):
  for dirpath, _, filenames in os.walk(directory):
    for filename in filenames:
      file_extension = os.path.splitext(filename)[1]
      if file_extension in ignore:
        continue
      yield os.path.abspath(os.path.join(dirpath, filename))

def relative_to_absolute_path(file):
    return os.path.abspath(file)

def encode_app(app_folder):
  app_files = get_absolute_file_paths(app_folder)
  url_encoded = shinylive.url_encode(app = relative_to_absolute_path(f"{app_folder}/app.py"), files = app_files, language = "py")
  return url_encoded
```

```{python link-gen}
#| echo: FALSE
mt = encode_app("mood-tracker-app")
qr = encode_app("qr-code-app")
recipe = encode_app("recipe-finder-app")
mermaid = encode_app("mermaid-chart-builder-app")
text_case = encode_app("text-case-converter-app")
tts = encode_app("text-to-speech-app")
tip = encode_app("tip-calculator-app")
ical = encode_app("itinerary-to-ical")
```

# shiny-assistant-apps

This repo collects different apps I've made using [Shiny Assistant](https://gallery.shinyapps.io/assistant/) originally released at Posit Conf 2024.

- [mood tracker](`{python} mt`)
- [qr-code generator](`{python} qr`)
- [recipe-finder](`{python} recipe`)
- [tip-calculator](`{python} tip`)
- [mermaid-chart-builder](`{python} mermaid`)
- [text case converter](`{python} text_case`)
- [text to speech](`{python} tts`)
- [itinerary text to ical](`{python} ical`)
- [code-architecture-diagram-llm-app](https://github.com/parmsam/code-architecture-diagram-llm-app/): Uses OpenAI API to generate a code architecture diagrams for Github Repos
- [quarto-clipper-llm-app](https://github.com/parmsam/quarto-clipper-llm-app): Uses OpenAI API and Beautiful Soup to convert a webpage to a Quarto document 
- [auto-wiki-links-llm-app](https://github.com/parmsam/auto-wiki-links-llm-app): Uses OpenAI API to generate a auto-link a body of text with Wikipedia links